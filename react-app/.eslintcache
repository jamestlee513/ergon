[{"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/index.js":"1","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/App.js":"2","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/services/auth.js":"3","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/LoginForm.js":"4","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/SignupForm.js":"5","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/SignUpForm.js":"6","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/NavBar.js":"7","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/LoginSigninPage.js":"8","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/Auth/LoginForm.js":"9","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/Auth/SignUpForm.js":"10","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/Auth/LoginSigninPage.js":"11"},{"size":412,"mtime":1610144319351,"results":"12","hashOfConfig":"13"},{"size":1791,"mtime":1610146728319,"results":"14","hashOfConfig":"13"},{"size":1074,"mtime":1610066881301,"results":"15","hashOfConfig":"13"},{"size":5219,"mtime":1610146483305,"results":"16","hashOfConfig":"13"},{"size":247,"mtime":1610065958844,"results":"17","hashOfConfig":"13"},{"size":5692,"mtime":1610146710833,"results":"18","hashOfConfig":"13"},{"size":1420,"mtime":1610146367270,"results":"19","hashOfConfig":"13"},{"size":1314,"mtime":1610146450163,"results":"20","hashOfConfig":"13"},{"size":5219,"mtime":1610146483305,"results":"21","hashOfConfig":"13"},{"size":5692,"mtime":1610146710833,"results":"22","hashOfConfig":"13"},{"size":1314,"mtime":1610146450163,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"djjv3l",{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/index.js",[],"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/App.js",["52","53","54","55","56","57"],"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/services/auth.js",[],["58","59"],"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/LoginForm.js",["60"],"import React, { useState } from 'react';\nimport { Box, Button, Divider, Flex, FormControl, Input, InputGroup, InputLeftElement, ListItem, Stack, toast, UnorderedList, useToast } from '@chakra-ui/react'\nimport { EmailIcon, LockIcon } from '@chakra-ui/icons';\nimport { login } from \"../../services/auth\";\n\nfunction LoginForm({ setAuthenticated }) {\n\n    const toast = useToast();\n    const [errors, setErrors] = useState([]);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [loginLoading, setLoginLoading] = useState(false);\n    const [demoLoading, setDemoLoading] = useState(false);\n\n    const loginUser = async e => {\n        e.preventDefault();\n        setLoginLoading(true);\n        const user = await login(email, password);\n        if (!user.errors) {\n            setAuthenticated(true);\n            toast({\n                title: \"Login success.\",\n                description: \"Welcome back!\",\n                status: \"success\",\n                duration: \"5000\",\n                isClosable: true\n            })\n        } else {\n            setErrors(user.errors);\n        }\n        setLoginLoading(false);\n    }\n\n    const loginDemo = async e => {\n        e.preventDefault();\n        setDemoLoading(true);\n        const user = await login(\"demo@demo.com\", \"password\");\n        if (!user.errors) {\n            setAuthenticated(true);\n        } else {\n            setErrors(user.errors);\n        }\n        setDemoLoading(false);\n    }\n\n\n    return (\n        <Box bg='gray.50' w='300px' h='400px' p={3} rounded='md'>\n            <Flex justify=\"center\" align=\"center\">\n\n                <Stack spacing={4}>\n                    {errors.length > 0 && (\n                        <>\n                            <UnorderedList>\n                                {errors.map((error, idx) =>\n                                    <ListItem key={idx}>{error}</ListItem>\n                                )}\n                            </UnorderedList>\n                            <Divider />\n                        </>\n                    )}\n                    <form type=\"submit\" onSubmit={loginUser}>\n                        <Stack spacing={3}>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<EmailIcon />} />\n                                    <Input\n                                        type=\"email\"\n                                        placeholder=\"email@example.com\"\n                                        value={email}\n                                        onChange={e => setEmail(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<LockIcon />} />\n                                    <Input\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={password}\n                                        onChange={e => setPassword(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <Button\n                                type=\"submit\"\n                                isLoading={loginLoading}\n                            >\n                                Log in\n                        </Button>\n                            <Button\n                                type=\"submit\"\n                                isLoading={demoLoading}\n                                onClick={loginDemo}\n                            >\n                                Log in as demo user\n                        </Button>\n                        </Stack>\n                    </form>\n                </Stack>\n            </Flex>\n        </Box>\n    )\n\n    // return (\n    //     <>\n    //         {errors.length > 0 && (\n    //             <div>\n    //                 <div>We encoutered the following errors:</div>\n    //                 {errors.map((error, idx) =>\n    //                     <div key={idx}>\n    //                         {error}\n    //                     </div>\n    //                 )}\n    //             </div>\n    //         )}\n    //         <form>\n    //             <input\n    //                 type=\"email\"\n    //                 placeholder=\"example@gmail.com\"\n    //                 value={email}\n    //                 onChange={e => setEmail(e.target.value)}\n    //             />\n    //             <input\n    //                 type=\"password\"\n    //                 placeholder=\"password\"\n    //                 value={password}\n    //                 onChange={e => setPassword(e.target.value)}\n    //             />\n    //             <button type=\"submit\" onClick={loginUser}>Log In</button>\n    //             <button type=\"submit\" onClick={loginDemo}>Log in as Demo User</button>\n    //         </form>\n    //     </>\n    // )\n}\n\nexport default LoginForm;","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/SignupForm.js",["61","62","63"],"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/SignUpForm.js",["64"],"import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Box, Button, Divider, Flex, FormControl, Input, InputGroup, InputLeftElement, ListItem, Stack, UnorderedList, useToast } from '@chakra-ui/react'\nimport { EmailIcon, InfoIcon, LockIcon } from '@chakra-ui/icons';\nimport { signUp } from \"../../services/auth\";\n\nfunction SignUpForm({ setAuthenticated }) {\n\n    const toast = useToast();\n    const [errors, setErrors] = useState([]);\n    const [firstname, setFirstname] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [signupLoading, setSignupLoading] = useState(false);\n\n    const signUpUser = async e => {\n        e.preventDefault();\n        setSignupLoading(true);\n        const user = await signUp(\n            firstname,\n            lastname,\n            username,\n            email,\n            password\n        );\n        if (!user.errors) {\n            setAuthenticated(true);\n            toast({\n                title: \"Account created.\",\n                description: \"Account signup was successful!\",\n                status: \"success\",\n                duration: \"5000\",\n                isClosable: true\n            })\n        } else {\n            setErrors(user.errors);\n        }\n        setSignupLoading(false);\n    }\n\n    return (\n        <Box bg='gray.50' w='300px' h='400px' p={3} rounded='md'>\n            <Flex justify=\"center\" align=\"center\">\n                <Stack spacing={4}>\n                    {errors.length > 0 && (\n                        <>\n                            <UnorderedList>\n                                {errors.map((error, idx) =>\n                                    <ListItem key={idx}>{error}</ListItem>\n                                )}\n                            </UnorderedList>\n                            <Divider />\n                        </>\n                    )}\n                    <form type=\"submit\" onSubmit={signUpUser}>\n                        <Stack spacing={3}>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<InfoIcon />} />\n                                    <Input\n                                        type=\"name\"\n                                        placeholder=\"First name\"\n                                        value={firstname}\n                                        onChange={e => setFirstname(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<InfoIcon />} />\n                                    <Input\n                                        type=\"name\"\n                                        placeholder=\"Last name\"\n                                        value={lastname}\n                                        onChange={e => setLastname(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <Divider />\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<InfoIcon />} />\n                                    <Input\n                                        type=\"name\"\n                                        placeholder=\"Username\"\n                                        value={username}\n                                        onChange={e => setUsername(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<EmailIcon />} />\n                                    <Input\n                                        type=\"email\"\n                                        placeholder=\"email@example.com\"\n                                        value={email}\n                                        onChange={e => setEmail(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<LockIcon />} />\n                                    <Input\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={password}\n                                        onChange={e => setPassword(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <Button\n                                type=\"submit\"\n                                isLoading={signupLoading}\n                            >\n                                Sign up\n                        </Button>\n                        </Stack>\n                    </form>\n                </Stack>\n            </Flex>\n        </Box>\n    )\n}\n\nexport default SignUpForm;","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/NavBar.js",["65","66","67"],"import { Box, Flex, Heading, MenuItem, MenuList, useToast } from '@chakra-ui/react';\nimport React from 'react';\nimport { logout } from '../services/auth';\nimport { NavLink, Router, useHistory } from 'react-router-dom';\n\nfunction NavBar({ authenticated, setAuthenticated }) {\n\n    const history = useHistory();\n    const toast = useToast();\n\n    const handleLogOut = e => {\n        e.preventDefault();\n        logout();\n        setAuthenticated(false);\n        toast({\n            title: \"Logged out\",\n            duration: \"5000\",\n            isClosable: true\n        })\n        history.push(\"/\");\n    }\n\n    return (\n        <Flex\n            justify=\"space-between\"\n            align=\"center\"\n            padding=\"1.5rem\"\n            bg=\"blue.100\"\n            color=\"white\"\n            w=\"100%\"\n            h=\"70px\"\n        >\n            <Box>\n                <Heading>\n                    Ergon\n                </Heading>\n            </Box>\n\n            <Flex\n                justify=\"space-between\"\n                w=\"40%\"\n            >\n                <NavLink exact to='/'>Home</NavLink>\n                <NavLink exact to='/signin'>Sign In</NavLink>\n                {authenticated && <NavLink to='/logout' onClick={handleLogOut}>Logout</NavLink>}\n                <NavLink to='/'>About</NavLink>\n                <NavLink to='/'>Settings</NavLink>\n            </Flex>\n\n        </Flex>\n    )\n}\n\nexport default NavBar;","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/auth/LoginSigninPage.js",[],"/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/Auth/LoginForm.js",["68"],"import React, { useState } from 'react';\nimport { Box, Button, Divider, Flex, FormControl, Input, InputGroup, InputLeftElement, ListItem, Stack, toast, UnorderedList, useToast } from '@chakra-ui/react'\nimport { EmailIcon, LockIcon } from '@chakra-ui/icons';\nimport { login } from \"../../services/auth\";\n\nfunction LoginForm({ setAuthenticated }) {\n\n    const toast = useToast();\n    const [errors, setErrors] = useState([]);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [loginLoading, setLoginLoading] = useState(false);\n    const [demoLoading, setDemoLoading] = useState(false);\n\n    const loginUser = async e => {\n        e.preventDefault();\n        setLoginLoading(true);\n        const user = await login(email, password);\n        if (!user.errors) {\n            setAuthenticated(true);\n            toast({\n                title: \"Login success.\",\n                description: \"Welcome back!\",\n                status: \"success\",\n                duration: \"5000\",\n                isClosable: true\n            })\n        } else {\n            setErrors(user.errors);\n        }\n        setLoginLoading(false);\n    }\n\n    const loginDemo = async e => {\n        e.preventDefault();\n        setDemoLoading(true);\n        const user = await login(\"demo@demo.com\", \"password\");\n        if (!user.errors) {\n            setAuthenticated(true);\n        } else {\n            setErrors(user.errors);\n        }\n        setDemoLoading(false);\n    }\n\n\n    return (\n        <Box w='300px' h='400px' p={3} rounded='md'>\n            <Flex justify=\"center\" align=\"center\">\n\n                <Stack spacing={4}>\n                    {errors.length > 0 && (\n                        <>\n                            <UnorderedList>\n                                {errors.map((error, idx) =>\n                                    <ListItem key={idx}>{error}</ListItem>\n                                )}\n                            </UnorderedList>\n                            <Divider />\n                        </>\n                    )}\n                    <form type=\"submit\" onSubmit={loginUser}>\n                        <Stack spacing={3}>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<EmailIcon />} />\n                                    <Input\n                                        type=\"email\"\n                                        placeholder=\"email@example.com\"\n                                        value={email}\n                                        onChange={e => setEmail(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<LockIcon />} />\n                                    <Input\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={password}\n                                        onChange={e => setPassword(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <Button\n                                type=\"submit\"\n                                isLoading={loginLoading}\n                            >\n                                Log in\n                        </Button>\n                            <Button\n                                type=\"submit\"\n                                isLoading={demoLoading}\n                                onClick={loginDemo}\n                            >\n                                Log in as demo user\n                        </Button>\n                        </Stack>\n                    </form>\n                </Stack>\n            </Flex>\n        </Box>\n    )\n\n    // return (\n    //     <>\n    //         {errors.length > 0 && (\n    //             <div>\n    //                 <div>We encoutered the following errors:</div>\n    //                 {errors.map((error, idx) =>\n    //                     <div key={idx}>\n    //                         {error}\n    //                     </div>\n    //                 )}\n    //             </div>\n    //         )}\n    //         <form>\n    //             <input\n    //                 type=\"email\"\n    //                 placeholder=\"example@gmail.com\"\n    //                 value={email}\n    //                 onChange={e => setEmail(e.target.value)}\n    //             />\n    //             <input\n    //                 type=\"password\"\n    //                 placeholder=\"password\"\n    //                 value={password}\n    //                 onChange={e => setPassword(e.target.value)}\n    //             />\n    //             <button type=\"submit\" onClick={loginUser}>Log In</button>\n    //             <button type=\"submit\" onClick={loginDemo}>Log in as Demo User</button>\n    //         </form>\n    //     </>\n    // )\n}\n\nexport default LoginForm;","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/Auth/SignUpForm.js",["69"],"import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Box, Button, Container, Divider, Flex, FormControl, Input, InputGroup, InputLeftElement, ListItem, Stack, UnorderedList, useToast } from '@chakra-ui/react'\nimport { EmailIcon, InfoIcon, LockIcon } from '@chakra-ui/icons';\nimport { signUp } from \"../../services/auth\";\n\nfunction SignUpForm({ setAuthenticated }) {\n\n    const toast = useToast();\n    const [errors, setErrors] = useState([]);\n    const [firstname, setFirstname] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [signupLoading, setSignupLoading] = useState(false);\n\n    const signUpUser = async e => {\n        e.preventDefault();\n        setSignupLoading(true);\n        const user = await signUp(\n            firstname,\n            lastname,\n            username,\n            email,\n            password\n        );\n        if (!user.errors) {\n            setAuthenticated(true);\n            toast({\n                title: \"Account created.\",\n                description: \"Account signup was successful!\",\n                status: \"success\",\n                duration: \"5000\",\n                isClosable: true\n            })\n        } else {\n            setErrors(user.errors);\n        }\n        setSignupLoading(false);\n    }\n\n    return (\n        <Box w='300px' h='400px' p={3} rounded='md'>\n            <Flex justify=\"center\" align=\"center\">\n                <Stack spacing={4}>\n                    {errors.length > 0 && (\n                        <>\n                            <UnorderedList>\n                                {errors.map((error, idx) =>\n                                    <ListItem key={idx}>{error}</ListItem>\n                                )}\n                            </UnorderedList>\n                            <Divider />\n                        </>\n                    )}\n                    <form type=\"submit\" onSubmit={signUpUser}>\n                        <Stack spacing={3}>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<InfoIcon />} />\n                                    <Input\n                                        type=\"name\"\n                                        placeholder=\"First name\"\n                                        value={firstname}\n                                        onChange={e => setFirstname(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<InfoIcon />} />\n                                    <Input\n                                        type=\"name\"\n                                        placeholder=\"Last name\"\n                                        value={lastname}\n                                        onChange={e => setLastname(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <Divider />\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<InfoIcon />} />\n                                    <Input\n                                        type=\"name\"\n                                        placeholder=\"Username\"\n                                        value={username}\n                                        onChange={e => setUsername(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<EmailIcon />} />\n                                    <Input\n                                        type=\"email\"\n                                        placeholder=\"email@example.com\"\n                                        value={email}\n                                        onChange={e => setEmail(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                            <FormControl isRequired>\n                                <InputGroup>\n                                    <InputLeftElement children={<LockIcon />} />\n                                    <Input\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={password}\n                                        onChange={e => setPassword(e.target.value)}\n                                    />\n                                </InputGroup>\n                            </FormControl>\n                        </Stack>\n                        <Container>\n                            <Button\n                                type=\"submit\"\n                                isLoading={signupLoading}\n                            >\n                                Sign up\n                        </Button>\n                        </Container>\n                    </form>\n                </Stack>\n            </Flex>\n        </Box>\n    )\n}\n\nexport default SignUpForm;","/Users/jameslee/Desktop/Aa-files/projects/ergon/react-app/src/components/Auth/LoginSigninPage.js",[],{"ruleId":"70","severity":1,"message":"71","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":23},{"ruleId":"70","severity":1,"message":"74","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":17},{"ruleId":"70","severity":1,"message":"75","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":18},{"ruleId":"70","severity":1,"message":"76","line":6,"column":10,"nodeType":"72","messageId":"73","endLine":6,"endColumn":23},{"ruleId":"70","severity":1,"message":"77","line":7,"column":10,"nodeType":"72","messageId":"73","endLine":7,"endColumn":27},{"ruleId":"70","severity":1,"message":"78","line":7,"column":29,"nodeType":"72","messageId":"73","endLine":7,"endColumn":37},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"70","severity":1,"message":"83","line":2,"column":105,"nodeType":"72","messageId":"73","endLine":2,"endColumn":110},{"ruleId":"70","severity":1,"message":"84","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":25},{"ruleId":"70","severity":1,"message":"85","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":18},{"ruleId":"70","severity":1,"message":"86","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":16},{"ruleId":"70","severity":1,"message":"85","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":18},{"ruleId":"70","severity":1,"message":"87","line":1,"column":30,"nodeType":"72","messageId":"73","endLine":1,"endColumn":38},{"ruleId":"70","severity":1,"message":"88","line":1,"column":40,"nodeType":"72","messageId":"73","endLine":1,"endColumn":48},{"ruleId":"70","severity":1,"message":"89","line":4,"column":19,"nodeType":"72","messageId":"73","endLine":4,"endColumn":25},{"ruleId":"70","severity":1,"message":"83","line":2,"column":105,"nodeType":"72","messageId":"73","endLine":2,"endColumn":110},{"ruleId":"70","severity":1,"message":"85","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":18},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'LoginForm' is defined but never used.","'SignUpForm' is defined but never used.","'ThemeProvider' is defined but never used.","'ColorModeProvider' is defined but never used.","'CSSReset' is defined but never used.","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'toast' is defined but never used.","'useState' is defined but never used.","'Redirect' is defined but never used.","'signUp' is defined but never used.","'MenuItem' is defined but never used.","'MenuList' is defined but never used.","'Router' is defined but never used.","no-global-assign","no-unsafe-negation"]